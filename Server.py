import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

TOKEN = "7548796569:AAE432a3Y5_gYWcitBWl-B3Ho95U7b2VWN8"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–æ—Ä–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_scores = {}

@dp.message(Command("start"))
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ò–≥—Ä–∞—Ç—å üéÆ", web_app=WebAppInfo(url="https://yourdomain.com/game.html"))]
        ]
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ò–≥—Ä–∞–π –≤ —Ç–∞–ø–∞–ª–∫—É –∏ —Å—Ç–∞–≤—å —Ä–µ–∫–æ—Ä–¥—ã!", reply_markup=keyboard)

@dp.message(Command("score"))
async def show_score(message: types.Message):
    user_id = message.from_user.id
    best_score = user_scores.get(user_id, 0)
    await message.answer(f"–¢–≤–æ–π —Ä–µ–∫–æ—Ä–¥: {best_score} —Ç–∞–ø–æ–≤!")

@dp.message()
async def receive_score(message: types.Message):
    user_id = message.from_user.id
    try:
        data = int(message.text)  # –û–∂–∏–¥–∞–µ–º —á–∏—Å–ª–æ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã)
        best_score = user_scores.get(user_id, 0)
        if data > best_score:
            user_scores[user_id] = data
            await message.answer(f"–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥: {data} —Ç–∞–ø–æ–≤! üéâ")
        else:
            await message.answer(f"–¢—ã –Ω–∞–±—Ä–∞–ª {data} —Ç–∞–ø–æ–≤. –¢–≤–æ–π —Ä–µ–∫–æ—Ä–¥: {best_score}.")

    except ValueError:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–ø–æ–≤!")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    dp.run_polling(bot)
